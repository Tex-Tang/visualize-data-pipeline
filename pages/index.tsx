import { Button } from "@/components/Button";
import { Input } from "@/components/Input";
import { edgeTypes, nodeTypes } from "@/features/rabbitmq";
import { getGraph } from "@/features/rabbitmq/graph";
import { getLayoutedElements } from "@/utils/react-flow";
import { useQuery } from "@tanstack/react-query";
import { isEqual } from "lodash";
import Head from "next/head";
import { useCallback, useEffect, useState } from "react";
import ReactFlow, {
  addEdge,
  applyEdgeChanges,
  applyNodeChanges,
  Background,
  ConnectionLineType,
  Controls,
  Edge,
  Node,
  OnConnect,
  OnEdgesChange,
  OnNodesChange,
} from "reactflow";
import "reactflow/dist/style.css";
import { useLocalStorage } from "usehooks-ts";

export default function HomePage() {
  const [nodes, setNodes] = useLocalStorage<Node[]>("nodes", []);
  const [edges, setEdges] = useLocalStorage<Edge[]>("edges", []);

  const [lastUpdated, setLastUpdated] = useState<Date>();
  const [doNotUpdate, setDoNotUpdate] = useState<boolean>(false);
  const [hideEmptyNodes, setHideEmptyNodes] = useLocalStorage<boolean>("hide-empty-nodes", false);

  const [host, setHost] = useLocalStorage<string>("host", "");
  const [username, setUsername] = useLocalStorage<string>("username", "");
  const [password, setPassword] = useLocalStorage<string>("password", "");

  const [pattern, setPattern] = useLocalStorage<string>("pattern", "");

  const [connected, setConnected] = useState<boolean>(host && username && password ? true : false);

  useQuery({
    enabled: connected,
    queryKey: ["graph"],
    queryFn: () => getGraph(nodes, edges, pattern ? new RegExp(pattern) : undefined),
    refetchInterval: 5 * 1000,
    onSuccess: (data) => {
      if (doNotUpdate) return;
      // First time we get data, we need to layout the graph
      if (nodes.length == 0 || edges.length == 0) {
        const layouted = getLayoutedElements(data.nodes, data.edges);
        setNodes(layouted.nodes);
        setEdges(layouted.edges);
      } else {
        setNodes(data.nodes);
        setEdges(data.edges);
      }
      setLastUpdated(new Date());
    },
  });

  const onNodesChange: OnNodesChange = useCallback((changes) => setNodes((nds) => applyNodeChanges(changes, nds)), []);
  const onEdgesChange: OnEdgesChange = useCallback((changes) => setEdges((eds) => applyEdgeChanges(changes, eds)), []);
  const onConnect: OnConnect = useCallback(
    (params) =>
      setEdges((eds) => {
        return addEdge(
          {
            ...params,
            id: `custom-${params.source}-${params.target}`,
          },
          eds
        );
      }),
    [setEdges]
  );

  useEffect(() => {
    const edgeSet = new Set([...edges.map((e) => e.source), ...edges.map((e) => e.target)]);
    const newNodes = nodes.map((n) => {
      if (hideEmptyNodes && !edgeSet.has(n.id)) {
        n.hidden = true;
      } else {
        n.hidden = false;
      }
      return n;
    });
    if (!isEqual(nodes, newNodes)) {
      setNodes(newNodes);
    }
  }, [hideEmptyNodes, nodes, edges]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="absolute left-0 top-0 p-4 z-50 flex flex-col gap-2">
        <div className="flex flex-col gap-2">
          <Input placeholder="Host" value={host} onChange={(e) => setHost(e.target.value)} />
          <Input placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} />
          <Input placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} />
          <Button
            onClick={() => {
              setConnected(true);
            }}
          >
            Connect
          </Button>
        </div>
        <Button onClick={() => setHideEmptyNodes(!hideEmptyNodes)} className="cursor-pointer">
          Toggle Hide Empty Node
        </Button>
        <Button
          onClick={() => {
            setNodes([]);
            setEdges([]);
          }}
          className="cursor-pointer"
        >
          Reset
        </Button>

        <Button
          onClick={() => {
            const layout = getLayoutedElements(nodes, edges);
            setNodes(layout.nodes);
            setEdges(layout.edges);
          }}
        >
          Organize
        </Button>

        <Input placeholder="Pattern" value={pattern} onChange={(e) => setPattern(e.target.value)} />
      </div>

      <div className="fixed left-0 top-0 h-full w-full">
        <ReactFlow
          nodes={nodes}
          edges={edges}
          nodeTypes={nodeTypes}
          edgeTypes={edgeTypes}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onClickConnectStart={() => setDoNotUpdate(true)}
          onClickConnectEnd={() => setDoNotUpdate(false)}
          onSelectionDragStart={() => setDoNotUpdate(true)}
          onSelectionDragStop={() => setDoNotUpdate(false)}
          onConnect={onConnect}
          connectionLineType={ConnectionLineType.SmoothStep}
          fitView
        >
          <Background />
          <Controls />
        </ReactFlow>
        <div className="absolute right-0 top-0 p-1 pr-2">
          {lastUpdated && <span className="font-mono text-sm">Last Updated: {lastUpdated.toISOString()}</span>}
        </div>
      </div>
    </>
  );
}
